{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\Desktop\\\\weather-forecast\\\\src\\\\App.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport SearchBar from './components/search/SearchBar';\nimport Weather from './components/main/Weather';\nimport { BsFillArrowLeftCircleFill as Left } from \"react-icons/bs\";\nimport { BsFillArrowRightCircleFill as Right } from \"react-icons/bs\";\nimport useGeoLocation from './hooks/useGeolocation';\nimport { getByLocation, getByCity } from './api/index';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  background: #304352;  \n  background: -webkit-linear-gradient(to right, #d7d2cc, #304352);  \n  background: linear-gradient(to right, #d7d2cc, #304352);\n  width: 800px;\n  height: 475px; \n  display: flex;\n  margin: auto;\n  border-radius: 30px;\n\n  #search-bar{\n    margin-left: 255px;\n  }\n  \n`;\n_c = Container;\nconst Wrapper = styled.div`\n  display:flex ;\n  flex-direction:row ;\n  \n  #center{\n    margin-left: 40px;\n    margin-top: 75px;\n    width: 725px;\n    height: 330px;\n    background: rgba( 203, 200, 200, 0.15 );\n    box-shadow: 0 8px 32px 0 rgba( 31, 38, 135, 0.37 );\n    backdrop-filter: blur( 0px );\n    -webkit-backdrop-filter: blur( 0px );\n    border-radius: 10px;\n    border: 1px solid rgba( 255, 255, 255, 0.18 );\n  }\n\n  #left{\n    margin-top: 220px;\n  }\n  #right{\n    margin-top: 220px;\n    margin-left: 20px;\n  }\n`;\n_c2 = Wrapper;\n\nconst App = () => {\n  _s();\n\n  const location = useGeoLocation();\n  const [data, setData] = useState({\n    city: \"\",\n    weather: \"\",\n    temperature: \"\",\n    humidity: \"\",\n    date: \"\",\n    message: \"\"\n  });\n  const [loaded, setLoaded] = useState(false);\n  const [term, setTerm] = useState(\"\");\n\n  const fetchData = async () => {\n    try {\n      const {\n        data\n      } = await getByLocation(location.coordinates.lat, location.coordinates.lng);\n      setData({\n        city: data.name,\n        weather: data.weather[0].main,\n        temperature: Math.round(data.main.temp),\n        humidity: data.main.humidity,\n        date: new Date(data.dt)\n      });\n      setLoaded(true);\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n\n  const fetchDataBySearch = async () => {\n    try {\n      const {\n        data\n      } = await getByCity(term);\n      setData({\n        city: data.name,\n        weather: data.weather[0].main,\n        temperature: Math.round(data.main.temp),\n        humidity: data.main.humidity,\n        date: new Date(data.dt)\n      });\n      setLoaded(true);\n    } catch (error) {\n      if (error.response.status === 404) {\n        setData({\n          message: error.message\n        });\n      }\n\n      console.log(error.message);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n\n    if (term) {\n      fetchDataBySearch();\n    }\n  }, [location, term]);\n  console.log(data.date);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"search-bar\",\n        children: /*#__PURE__*/_jsxDEV(SearchBar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Wrapper, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"center\",\n          children: /*#__PURE__*/_jsxDEV(Weather, {\n            city: data.city,\n            temperature: data.temperature,\n            weather: data.weather,\n            humidity: data.humidity,\n            date: data.date,\n            loaded: loaded\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"TTuh8iW/fmJR78Vwrg2bP2+t2/I=\", false, function () {\n  return [useGeoLocation];\n});\n\n_c3 = App;\nexport default App;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"Wrapper\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"sources":["C:/Users/PC/Desktop/weather-forecast/src/App.jsx"],"names":["React","useEffect","useState","styled","SearchBar","Weather","BsFillArrowLeftCircleFill","Left","BsFillArrowRightCircleFill","Right","useGeoLocation","getByLocation","getByCity","Container","div","Wrapper","App","location","data","setData","city","weather","temperature","humidity","date","message","loaded","setLoaded","term","setTerm","fetchData","coordinates","lat","lng","name","main","Math","round","temp","Date","dt","error","console","log","fetchDataBySearch","response","status"],"mappings":"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","sourcesContent":["import React,{useEffect,useState} from 'react'\nimport styled from 'styled-components'\nimport SearchBar from './components/search/SearchBar'\nimport Weather from './components/main/Weather'\nimport { BsFillArrowLeftCircleFill as Left } from \"react-icons/bs\"\nimport { BsFillArrowRightCircleFill as Right } from \"react-icons/bs\"\nimport useGeoLocation from './hooks/useGeolocation'\nimport {getByLocation,getByCity} from './api/index'\n\nconst Container = styled.div`\n  background: #304352;  \n  background: -webkit-linear-gradient(to right, #d7d2cc, #304352);  \n  background: linear-gradient(to right, #d7d2cc, #304352);\n  width: 800px;\n  height: 475px; \n  display: flex;\n  margin: auto;\n  border-radius: 30px;\n\n  #search-bar{\n    margin-left: 255px;\n  }\n  \n`\nconst Wrapper = styled.div`\n  display:flex ;\n  flex-direction:row ;\n  \n  #center{\n    margin-left: 40px;\n    margin-top: 75px;\n    width: 725px;\n    height: 330px;\n    background: rgba( 203, 200, 200, 0.15 );\n    box-shadow: 0 8px 32px 0 rgba( 31, 38, 135, 0.37 );\n    backdrop-filter: blur( 0px );\n    -webkit-backdrop-filter: blur( 0px );\n    border-radius: 10px;\n    border: 1px solid rgba( 255, 255, 255, 0.18 );\n  }\n\n  #left{\n    margin-top: 220px;\n  }\n  #right{\n    margin-top: 220px;\n    margin-left: 20px;\n  }\n`\n\n\nconst App = () => {\n  const location = useGeoLocation();\n  const [data, setData] = useState({city:\"\",weather:\"\",temperature:\"\",humidity:\"\",date:\"\",message:\"\"})\n  const [loaded, setLoaded] = useState(false)\n  const [term,setTerm] = useState(\"\")\n  \n\n  const fetchData = async () =>{\n    try {\n      const {data} = await getByLocation(location.coordinates.lat,location.coordinates.lng)\n      setData({city:data.name,weather:data.weather[0].main,temperature:Math.round(data.main.temp),humidity:data.main.humidity,date:new Date(data.dt)})\n      setLoaded(true)\n      \n    } catch (error) {\n      console.log(error.message)\n    }\n    \n  }\n\n  const fetchDataBySearch = async () =>{\n    try {\n      const {data} = await getByCity(term)      \n      setData({city:data.name,weather:data.weather[0].main,temperature:Math.round(data.main.temp),humidity:data.main.humidity,date:new Date(data.dt)})\n      setLoaded(true)\n    } catch (error) {\n      if(error.response.status === 404){\n        setData({message:error.message})\n      }\n      console.log(error.message)\n    }\n  }\n\n  useEffect(() =>{  \n      fetchData()\n      if (term)\n      {\n        fetchDataBySearch()\n      }\n      \n  },[location,term])\n  \n  console.log(data.date)\n\n  return (   \n    <Container>     \n      <div>\n        <div id='search-bar'>\n          <SearchBar />             \n        </div>     \n        <Wrapper>\n          {/* <div id='left'><Left onClick={fetchData} /></div> */}\n          <div id='center'>\n            <Weather \n            city={data.city}\n            temperature={data.temperature}  \n            weather={data.weather}\n            humidity={data.humidity}\n            date={data.date}\n            loaded={loaded}\n            />\n          </div>\n          {/* <div id='right'><Right /></div> */}\n        </Wrapper>        \n      </div>\n    </Container>\n  )\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}